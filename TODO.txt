Nachzuholen:

4.2 Login
Legen Sie die SQL-Query zum Ermitteln der Rolle für einen
bestimmten Benutzer als View [5] oder StoredProcedure [6][7] an.
Der Preis des Produkts wird nach der Rolle korrekt angezeigt.


[6] Stored Procedures in MariaDB
https://mariadb.com/kb/en/library/stored-procedure-overview/
[7] Stored Procedures in C#/MySql.Data aufrufen
https://dev.mysql.com/doc/connector-net/en/connector-net-programming-stored-using.html

Testen Sie die Query zuvor in HeidiSQL und verfeinern Sie sie
dahingehend, dass Ihre Anwendung nur noch die Rolle erfragt.

Da es um einen Benutzer und genau eine Rolle geht, nutzen Sie
ExecuteScalar bzw. ExecuteNonQuery und lassen sich den Rollenwert
direkt zurückgeben.
Beispiel:
• Meldet sich ein Student mit der Nummer 8 an, könnte die View
bereits "Student" zurückgeben.
• Meldet sich ein Mitarbeiter mit der Nummer 23 an, könnte die View
direkt "Mitarbeiter" zurückgeben.
SELECT Rolle FROM Nutzerrolle WHERE Nummer = 8;
 "Student"




Noch Zu Übertragen:
Produkte 



Anpassungen:

Registrierung

Neue erfolgreiche Registrierungen sind zunächst inaktiv
(Benutzer.Aktiv) und sollen sich nicht anmelden können bis sie
aktiviert wurden

• Realisieren Sie mithilfe von Transaktionen, dass ein Benutzer
wirklich nur dann in der Datenbank erscheint, wenn auch die
Spezialisierung erfolgreich eingefügt werden konnte
 denken Sie z.B. an etwaige CHECK Constraints, die das Anlegen eines Studenten
verhindern, dann dürfen die zugehörigen Zeilen in FE-Nutzer und FH-Angehörige nicht
eingetragen werden
